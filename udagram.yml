Description: 'CloudFormation for Udagram'

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    UdagramPublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    UdagramPublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

Resources:

####################################################
#                                                  #
#                       NETWORK                    #
#                                                  #
####################################################

# SPAWN VPC

    UdagramVirtualPrivateCloud:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

# SPAWN INTERNET GATEWAY

    UdagramInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties: 
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

# SPAWN INTERNET GATEWAY ATTACHMENT TO VPC

    UdagramInternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref UdagramInternetGateway
        VpcId: !Ref UdagramVirtualPrivateCloud

# SPAWN PUBLIC SUBNETS

    UdagramPublicSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref UdagramVirtualPrivateCloud
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref UdagramPublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    UdagramPublicSubnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref UdagramVirtualPrivateCloud
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref UdagramPublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

# SPAWN PRIVATE SUBNETS

    UdagramPrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    UdagramPrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

####################################################
#                                                  #
#                       SERVERS                    #
#                                                  #
####################################################

# SPAWN SERVER IAM ROLE

    UdagramIAMRole:
        Type: AWS::IAM::Role
        Properties: 
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                  - 'sts:AssumeRole'
            Description: IAM Role to allow for Udagram to access s3 buckets
            Path: /
            Policies: 
                - PolicyName: Udagrams3Policy
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                    - Effect: Allow
                      Action:
                      - s3:Get*
                      - s3:List*
                      Resource: "arn:aws:s3:::udacity-demo-1"
            RoleName: UdacityS3ReadOnlyEC2
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

# SPAWN IAM INSTANCE PROFILE BASED ON SERVER ROLE

    UdagramIAMProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
            - !Ref UdagramIAMRole

# SERVER BLUEPRINT

    UdagramLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties: 
            IamInstanceProfile: !Ref UdagramIAMProfile
            ImageId: ami-02701bcdc5509e57b
            InstanceType: t2.medium
            # REMOVE KEY IN PRODUCTION
            KeyName: UdagramKey
            LaunchConfigurationName: !Sub ${EnvironmentName} Launch Configuration
            # ADD SECURITY GROUP(S)
            #SecurityGroups: 
            #    - String
            # ADD USER SCRIPT FOR START-UP    
            #UserData: String

