# .___  ___.      ___   .___________.___________. __    __   __   _______  __    __  
# |   \/   |     /   \  |           |           ||  |  |  | |  | |   ____||  |  |  | 
# |  \  /  |    /  ^  \ `---|  |----`---|  |----`|  |__|  | |  | |  |__   |  |  |  | 
# |  |\/|  |   /  /_\  \    |  |        |  |     |   __   | |  | |   __|  |  |  |  | 
# |  |  |  |  /  _____  \   |  |        |  |     |  |  |  | |  | |  |____ |  `--'  | 
# |__|  |__| /__/     \__\  |__|        |__|     |__|  |__| |__| |_______| \______/  

# 888     888 8888888b.        d8888  .d8888b.  8888888b.         d8888 888b     d888 
# 888     888 888  "Y88b      d88888 d88P  Y88b 888   Y88b       d88888 8888b   d8888 
# 888     888 888    888     d88P888 888    888 888    888      d88P888 88888b.d88888 
# 888     888 888    888    d88P 888 888        888   d88P     d88P 888 888Y88888P888 
# 888     888 888    888   d88P  888 888  88888 8888888P"     d88P  888 888 Y888P 888 
# 888     888 888    888  d88P   888 888    888 888 T88b     d88P   888 888  Y8P  888 
# Y88b. .d88P 888  .d88P d8888888888 Y88b  d88P 888  T88b   d8888888888 888   "   888 
#  "Y88888P"  8888888P" d88P     888  "Y8888P88 888   T88b d88P     888 888       888
                                                                     
#      _________    _  _   ___ ____    _____ ___     ___  _    ___  _ 
#   _ |___ |___ \  | || | / _ |___ \  |___  ( _ )   / _ \/ |  / _ \/ |
# _| |_ |_ \ __) | | || || (_) |__) |    / // _ \  | (_) | | | | | | |
#|_   ____) / __/  |__   _\__, / __/    / /| (_) |  \__, | | | |_| | |
#  |_||____|_____|    |_|   /_|_____|  /_/  \___/     /_/|_|  \___/|_|


Description: 'CloudFormation for Udagram'

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    UdagramPublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    UdagramPublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

    UdagramPrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.0.0/24

    UdagramPrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.1.0/24

Resources:

######################################################################################
#                                                                                    #
#                                      NETWORK                                       #
#                                                                                    #
######################################################################################

# SPAWN VPC

    UdagramVirtualPrivateCloud:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

# SPAWN INTERNET GATEWAY

    UdagramInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties: 
        Tags:
          - Key: Name
            Value: !Ref EnvironmentName

# SPAWN INTERNET GATEWAY ATTACHMENT TO VPC

    UdagramInternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref UdagramInternetGateway
        VpcId: !Ref UdagramVirtualPrivateCloud

# SPAWN PUBLIC SUBNETS

    UdagramPublicSubnet1: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref UdagramVirtualPrivateCloud
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref UdagramPublicSubnet1CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    UdagramPublicSubnet2: 
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref UdagramVirtualPrivateCloud
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref UdagramPublicSubnet2CIDR
          MapPublicIpOnLaunch: true
          Tags: 
              - Key: Name 
                Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

# SPAWN PRIVATE SUBNETS

    UdagramPrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UdagramVirtualPrivateCloud
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref UdagramPrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    UdagramPrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UdagramVirtualPrivateCloud
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref UdagramPrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

# SPAWN PUBLIC ROUTE TABLE

    UdagramPublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UdagramVirtualPrivateCloud
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Route Table

    UdagramDefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: UdagramInternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref UdagramPublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref UdagramInternetGateway

    UdagramPublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref UdagramPublicRouteTable
            SubnetId: !Ref UdagramPublicSubnet1

    UdagramPublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref UdagramPublicRouteTable
            SubnetId: !Ref UdagramPublicSubnet2

# SPAWN PRIVATE ROUTE TABLES

    UdagramPrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UdagramVirtualPrivateCloud
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Route Table 1

    UdagramPrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UdagramVirtualPrivateCloud
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Route Table 2

######################################################################################
#                                                                                    #
#                                      SERVERS                                       #
#                                                                                    #
######################################################################################

# SPAWN SERVER IAM ROLE

    UdagramIAMRole:
        Type: AWS::IAM::Role
        Properties: 
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                  - 'sts:AssumeRole'
            Description: IAM Role to allow for Udagram to access s3 buckets
            Path: /
            Policies: 
                - PolicyName: Udagrams3Policy
                  PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                    - Effect: Allow
                      Action:
                      - s3:Get*
                      - s3:List*
                      Resource: "arn:aws:s3:::udacity-demo-1"
            RoleName: UdacityS3ReadOnlyEC2
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

# SPAWN IAM INSTANCE PROFILE BASED ON SERVER ROLE

    UdagramIAMProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
            - !Ref UdagramIAMRole

# SPAWN UDAGRAM SERVER SECURITY GROUPS

    UdagramServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
        GroupDescription: Allow http and ssh
        VpcId: !Ref UdagramVirtualPrivateCloud
        SecurityGroupIngress:
        - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            # REMOVE SSH IN PRODUCTION
        - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
        GroupDescription: Allow http to the load balancer
        VpcId: !Ref UdagramVirtualPrivateCloud
        SecurityGroupIngress:
        - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

# SERVER BLUEPRINT

    UdagramLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties: 
            IamInstanceProfile: !Ref UdagramIAMProfile
            ImageId: ami-02701bcdc5509e57b
            InstanceType: t2.medium
            # REMOVE KEY IN PRODUCTION
            KeyName: UdagramKey
            LaunchConfigurationName: !Sub ${EnvironmentName} Launch Configuration
            SecurityGroups: !Ref UdagramServerSecGroup 
            UserData:
                Fn::Base64: !Sub
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1/udacity.zip .
                    unzip -o udacity.zip

